Metadata-Version: 2.4
Name: seal-calibration
Version: 0.1.0
Summary: Calibration library for 3DMakerPro SEAL 3D scanners
Home-page: https://github.com/klich3/3dMakerPro-SEAL-Calibration-script
Author: Anton Sychev
License: CC BY-NC 4.0
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE.md
Requires-Dist: numpy<3,>=1.24
Requires-Dist: opencv-python<5,>=4.6
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# SEAL Calibration Library

> üì¶ Librer√≠a Python profesional para calibraci√≥n de esc√°neres 3D SEAL de 3DMakerPro

[![Python](https://img.shields.io/badge/python-3.8%2B-blue)](https://www.python.org/)
[![OpenCV](https://img.shields.io/badge/opencv-4.5%2B-green)](https://opencv.org/)
[![License](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE.md)

## üéØ Descripci√≥n

**SEAL Calibration** es una librer√≠a modular y reutilizable que proporciona herramientas completas para calibraci√≥n de sistemas de visi√≥n est√©reo. Dise√±ada espec√≠ficamente para esc√°neres 3D SEAL y SEAL Lite de 3DMakerPro.

### ‚ú® Caracter√≠sticas principales

- üì∑ **Calibraci√≥n individual** de c√°maras con m√∫ltiples patrones
- üéØ **Calibraci√≥n est√©reo** de alta precisi√≥n  
- üé® **Calibraci√≥n de proyector** con patrones de luz estructurada
- üíæ **Exportaci√≥n** en formato SEAL compatible
- üîß **API modular** y extensible
- üìä **Validaci√≥n** y visualizaci√≥n de resultados

---

## üìÅ Arquitectura

La librer√≠a est√° organizada en m√≥dulos especializados:

```
seal_calibration/
‚îú‚îÄ‚îÄ core/              # Algoritmos de calibraci√≥n
‚îÇ   ‚îú‚îÄ‚îÄ camera.py      # Calibraci√≥n de c√°mara individual
‚îÇ   ‚îú‚îÄ‚îÄ stereo.py      # Calibraci√≥n est√©reo
‚îÇ   ‚îú‚îÄ‚îÄ projector.py   # Calibraci√≥n de proyector
‚îÇ   ‚îî‚îÄ‚îÄ validation.py  # Validaci√≥n de resultados
‚îÇ
‚îú‚îÄ‚îÄ io/                # Entrada/Salida
‚îÇ   ‚îú‚îÄ‚îÄ loader.py      # Carga archivos SEAL
‚îÇ   ‚îú‚îÄ‚îÄ writer.py      # Escribe archivos SEAL
‚îÇ   ‚îî‚îÄ‚îÄ parser.py      # Parser de formato
‚îÇ
‚îú‚îÄ‚îÄ pattern/           # Detecci√≥n de patrones
‚îÇ   ‚îú‚îÄ‚îÄ chessboard.py  # Tablero de ajedrez
‚îÇ   ‚îú‚îÄ‚îÄ circles.py     # C√≠rculos asim√©tricos
‚îÇ   ‚îú‚îÄ‚îÄ charuco.py     # ChArUco board
‚îÇ   ‚îî‚îÄ‚îÄ stripes.py     # Patrones de franjas
‚îÇ
‚îú‚îÄ‚îÄ utils/             # Utilidades
‚îÇ   ‚îú‚îÄ‚îÄ geometry.py    # Transformaciones geom√©tricas
‚îÇ   ‚îú‚îÄ‚îÄ image.py       # Procesamiento de imagen
‚îÇ   ‚îî‚îÄ‚îÄ visualization.py  # Visualizaci√≥n
‚îÇ
‚îî‚îÄ‚îÄ models/            # Modelos de datos
    ‚îú‚îÄ‚îÄ camera_params.py  # Par√°metros de c√°mara
    ‚îú‚îÄ‚îÄ stereo_params.py  # Par√°metros est√©reo
    ‚îî‚îÄ‚îÄ seal_calib.py     # Calibraci√≥n SEAL completa
```

---

## üöÄ Instalaci√≥n

```bash
# Clonar el repositorio
git clone https://github.com/yourusername/seal-calibration.git
cd seal-calibration

# Instalar con pip
pip install -e .

# O con dependencias de desarrollo
pip install -e ".[dev]"
```

### üì¶ Requisitos

- Python 3.8+
- NumPy >= 1.21.0
- OpenCV >= 4.5.0
- SciPy >= 1.7.0

---

## üí° Uso R√°pido

### Calibraci√≥n b√°sica de c√°mara

```python
from seal_calibration import CameraCalibrator, ChessboardDetector

# Crear detector de patr√≥n
detector = ChessboardDetector(rows=6, cols=9, square_size=25.0)

# Crear calibrador
calibrator = CameraCalibrator(detector)

# Calibrar (despu√©s de recopilar objpoints e imgpoints)
camera_params = calibrator.calibrate(objpoints, imgpoints, img_size)

print(f"Error RMS: {camera_params.rms_error:.4f}")
print(f"fx={camera_params.fx:.2f}, fy={camera_params.fy:.2f}")
```

### Calibraci√≥n est√©reo

```python
from seal_calibration import StereoCalibrator

# Crear calibrador est√©reo
stereo_cal = StereoCalibrator()

# Calibrar
stereo_params = stereo_cal.calibrate(
    objpoints, 
    imgpoints_left, 
    imgpoints_right,
    camera_left, 
    camera_right, 
    img_size
)

print(f"Baseline: {stereo_params.baseline:.2f} mm")
```

### Exportar a formato SEAL

```python
from seal_calibration import SEALCalibration, SEALCalibrationWriter

# Crear objeto de calibraci√≥n SEAL
seal_calib = SEALCalibration(
    resolution=(1280, 720),
    scale_factors=(11.6, 4.4),  # DE LA PLANTILLA
    offset_center=(162, 110),    # DE LA PLANTILLA
    offset_tilt=(4, -80),        # DE LA PLANTILLA
    camera_left=camera_left,
    camera_right=camera_right,
    stereo=stereo_params,
    metadata={'dev_id': 'JMS1006207'}
)

# Exportar
SEALCalibrationWriter.write(
    seal_calib, 
    "output.txt", 
    template_path="template.txt"
)
```

---

## üìö Ejemplos

Consulta la carpeta [`examples/`](examples/) para ejemplos completos:

- [`basic_calibration.py`](examples/basic_calibration.py) - Calibraci√≥n de una c√°mara
- [`stereo_calibration.py`](examples/stereo_calibration.py) - Calibraci√≥n est√©reo
- [`seal_format_export.py`](examples/seal_format_export.py) - Exportaci√≥n a formato SEAL

---

## üé® Patrones soportados

| Patr√≥n | Detector | Descripci√≥n |
|:------:|:--------:|:------------|
| ‚ôüÔ∏è Chessboard | `ChessboardDetector` | Tablero de ajedrez cl√°sico |
| ‚ö™ Circles | `CirclesDetector` | C√≠rculos asim√©tricos |
| üéØ ChArUco | `CharucoDetector` | Combinaci√≥n ArUco + Chessboard |
| üìê Stripes | `StripesDetector` | Franjas para luz estructurada |

---

## ‚ö†Ô∏è Par√°metros de F√°brica

**CR√çTICO:** Las l√≠neas 2-4 del archivo SEAL contienen par√°metros de f√°brica calibrados con equipamiento especializado:

- **L√≠nea 2**: Factores de escala (baseline, profundidad)
- **L√≠nea 3**: Offset del centro de proyecci√≥n
- **L√≠nea 4**: Correcci√≥n angular y altura del proyector

**Estos par√°metros NO deben modificarse** durante la calibraci√≥n, ya que causar√≠an:
- Alteraci√≥n de escala 3D
- Desplazamiento/distorsi√≥n de la escena
- Inclinaci√≥n o arqueo del plano 3D

La librer√≠a preserva autom√°ticamente estos valores cuando se usa una plantilla.

---

## üîß API Referencia

### M√≥dulos principales

- **`seal_calibration.core`** - Algoritmos de calibraci√≥n
- **`seal_calibration.io`** - Lectura/escritura de archivos
- **`seal_calibration.pattern`** - Detecci√≥n de patrones
- **`seal_calibration.utils`** - Utilidades auxiliares
- **`seal_calibration.models`** - Modelos de datos

### Clases principales

```python
# Calibradores
from seal_calibration import (
    CameraCalibrator,      # Calibraci√≥n de c√°mara
    StereoCalibrator,      # Calibraci√≥n est√©reo
    ProjectorCalibrator,   # Calibraci√≥n de proyector
)

# Detectores de patrones
from seal_calibration import (
    ChessboardDetector,
    CirclesDetector,
    CharucoDetector,
    StripesDetector,
)

# I/O
from seal_calibration import (
    SEALCalibrationLoader,
    SEALCalibrationWriter,
)

# Modelos
from seal_calibration import (
    CameraParams,
    StereoParams,
    SEALCalibration,
)
```

---

## üß™ Testing

```bash
# Ejecutar tests
pytest tests/

# Con cobertura
pytest --cov=seal_calibration tests/
```

---

## üìñ Documentaci√≥n

Para documentaci√≥n del proyecto heredado y scripts CLI, consulta:

- [`LEGACY_README.md`](LEGACY_README.md) - Documentaci√≥n del proyecto original
- [`GRAY_CODE_GUIDE.md`](GRAY_CODE_GUIDE.md) - Gu√≠a de calibraci√≥n con Gray Code
- [`PROJECTOR_CALIBRATION.md`](PROJECTOR_CALIBRATION.md) - Calibraci√≥n de proyector

---

## ü§ù Contribuciones

Las contribuciones son bienvenidas. Por favor:

1. Fork el proyecto
2. Crea una rama para tu feature (`git checkout -b feature/AmazingFeature`)
3. Commit tus cambios (`git commit -m 'Add AmazingFeature'`)
4. Push a la rama (`git push origin feature/AmazingFeature`)
5. Abre un Pull Request

---

## üìÑ Licencia

Este proyecto est√° bajo la licencia CC BY-NC 4.0. Ver [`LICENSE.md`](LICENSE.md) para m√°s detalles.

---

## ‚ö†Ô∏è Disclaimer

Este software se proporciona **"tal cual"**, sin garant√≠a de ning√∫n tipo.

- El uso indebido puede **anular la garant√≠a** del dispositivo
- El autor **no es responsable** de da√±os, p√©rdidas o fallos resultantes del uso

**√ösalo bajo tu propio riesgo.**

---

## üôè Agradecimientos

- Proyecto desarrollado independientemente para esc√°neres **3DMakerPro SEAL Lite**
- **No est√° afiliado** con 3DMakerPro o sus distribuidores
- Basado en **OpenCV** y algoritmos de visi√≥n por computadora est√°ndar

---

**Made with ‚ù§Ô∏è for the 3D scanning community**
