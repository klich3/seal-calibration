Metadata-Version: 2.4
Name: seal-calibration
Version: 0.1.0
Summary: Calibration library for 3DMakerPro SEAL 3D scanners
Home-page: https://github.com/klich3/3dMakerPro-SEAL-Calibration-script
Author: Anton Sychev
Author-email: Anton Sychev <anton@sychev.xyz>
License: CC BY-NC 4.0
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE.md
Requires-Dist: numpy<3,>=1.26.2
Requires-Dist: opencv-contrib-python==4.8.0.76
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# SEAL Calibration Library

> üì¶ Professional Python library for calibrating 3DMakerPro SEAL 3D scanners

***ORIGINAL PROJECT***
`https://github.com/klich3/3dMakerPro-SEAL-Calibration-script`

[![Python](https://img.shields.io/badge/python-3.8%2B-blue)](https://www.python.org/)
[![OpenCV](https://img.shields.io/badge/opencv-4.5%2B-green)](https://opencv.org/)
[![License](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE.md)

## üéØ Description

**SEAL Calibration** is a modular and reusable library that provides complete tools for stereo vision system calibration. Specifically designed for 3DMakerPro SEAL and SEAL Lite 3D scanners.

### ‚ú® Key Features

- üì∑ **Individual camera calibration** with multiple patterns
- üéØ **High-precision stereo calibration**  
- üé® **Projector calibration** with structured light patterns
- üíæ **Export** to SEAL-compatible format
- üîß **Modular and extensible** API
- üìä **Validation** and visualization of results

---

## üìÅ Architecture

The library is organized into specialized modules:

```
seal_calibration/
‚îú‚îÄ‚îÄ core/              # Calibration algorithms
‚îÇ   ‚îú‚îÄ‚îÄ camera.py      # Individual camera calibration
‚îÇ   ‚îú‚îÄ‚îÄ stereo.py      # Stereo calibration
‚îÇ   ‚îú‚îÄ‚îÄ projector.py   # Projector calibration
‚îÇ   ‚îî‚îÄ‚îÄ validation.py  # Results validation
‚îÇ
‚îú‚îÄ‚îÄ io/                # Input/Output
‚îÇ   ‚îú‚îÄ‚îÄ loader.py      # Load SEAL files
‚îÇ   ‚îú‚îÄ‚îÄ writer.py      # Write SEAL files
‚îÇ   ‚îî‚îÄ‚îÄ parser.py      # Format parser
‚îÇ
‚îú‚îÄ‚îÄ pattern/           # Pattern detection
‚îÇ   ‚îú‚îÄ‚îÄ chessboard.py  # Chessboard pattern
‚îÇ   ‚îú‚îÄ‚îÄ circles.py     # Asymmetric circles
‚îÇ   ‚îú‚îÄ‚îÄ charuco.py     # ChArUco board
‚îÇ   ‚îî‚îÄ‚îÄ stripes.py     # Stripe patterns
‚îÇ
‚îú‚îÄ‚îÄ utils/             # Utilities
‚îÇ   ‚îú‚îÄ‚îÄ geometry.py    # Geometric transformations
‚îÇ   ‚îú‚îÄ‚îÄ image.py       # Image processing
‚îÇ   ‚îî‚îÄ‚îÄ visualization.py  # Visualization
‚îÇ
‚îî‚îÄ‚îÄ models/            # Data models
    ‚îú‚îÄ‚îÄ camera_params.py  # Camera parameters
    ‚îú‚îÄ‚îÄ stereo_params.py  # Stereo parameters
    ‚îî‚îÄ‚îÄ seal_calib.py     # Complete SEAL calibration
```

---

## üöÄ Installation

```bash
# Clone the repository
git clone https://github.com/yourusername/seal-calibration.git
cd seal-calibration

# Install with pip
pip install -e .

# Or with development dependencies
pip install -e ".[dev]"
```

### üì¶ Requirements

- Python 3.8+
- NumPy >= 1.21.0
- OpenCV >= 4.5.0
- SciPy >= 1.7.0

---

## üí° Quick Start

### Basic camera calibration

```python
from seal_calibration import CameraCalibrator, ChessboardDetector

# Create pattern detector
detector = ChessboardDetector(rows=6, cols=9, square_size=25.0)

# Create calibrator
calibrator = CameraCalibrator(detector)

# Calibrate (after collecting objpoints and imgpoints)
camera_params = calibrator.calibrate(objpoints, imgpoints, img_size)

print(f"RMS Error: {camera_params.rms_error:.4f}")
print(f"fx={camera_params.fx:.2f}, fy={camera_params.fy:.2f}")
```

### Stereo calibration

```python
from seal_calibration import StereoCalibrator

# Create stereo calibrator
stereo_cal = StereoCalibrator()

# Calibrate
stereo_params = stereo_cal.calibrate(
    objpoints, 
    imgpoints_left, 
    imgpoints_right,
    camera_left, 
    camera_right, 
    img_size
)

print(f"Baseline: {stereo_params.baseline:.2f} mm")
```

### Export to SEAL format

```python
from seal_calibration import SEALCalibration, SEALCalibrationWriter

# Create SEAL calibration object
seal_calib = SEALCalibration(
    resolution=(1280, 720),
    scale_factors=(11.6, 4.4),  # FROM TEMPLATE
    offset_center=(162, 110),    # FROM TEMPLATE
    offset_tilt=(4, -80),        # FROM TEMPLATE
    camera_left=camera_left,
    camera_right=camera_right,
    stereo=stereo_params,
    metadata={'dev_id': 'JMS1006207'}
)

# Export
SEALCalibrationWriter.write(
    seal_calib, 
    "output.txt", 
    template_path="template.txt"
)
```

---

## üìö Examples

Check the [`examples/`](examples/) folder for complete examples:

- [`basic_calibration.py`](examples/basic_calibration.py) - Single camera calibration
- [`stereo_calibration.py`](examples/stereo_calibration.py) - Stereo calibration
- [`stereo_calibration_complete.py`](examples/stereo_calibration_complete.py) - Complete stereo workflow
- [`seal_format_export.py`](examples/seal_format_export.py) - SEAL format export
- [`stereo_to_seal.py`](examples/stereo_to_seal.py) - Stereo to SEAL conversion

---

## üé® Supported Patterns

| Pattern | Detector | Description |
|:------:|:--------:|:------------|
| ‚ôüÔ∏è Chessboard | `ChessboardDetector` | Classic chessboard pattern |
| ‚ö™ Circles | `CirclesDetector` | Asymmetric circles |
| üéØ ChArUco | `CharucoDetector` | ArUco + Chessboard combination |
| üìê Stripes | `StripesDetector` | Stripes for structured light |

---

## ‚ö†Ô∏è Factory Parameters

**CRITICAL:** Lines 2-4 of the SEAL file contain factory parameters calibrated with specialized equipment:

- **Line 2**: Scale factors (baseline, depth)
- **Line 3**: Projection center offset
- **Line 4**: Angular correction and projector height

**These parameters MUST NOT be modified** during calibration, as they would cause:
- 3D scale alteration
- Scene displacement/distortion
- Tilting or bowing of the 3D plane

The library automatically preserves these values when using a template.

---

## üîß API Reference

### Main Modules

- **`seal_calibration.core`** - Calibration algorithms
- **`seal_calibration.io`** - File reading/writing
- **`seal_calibration.pattern`** - Pattern detection
- **`seal_calibration.utils`** - Auxiliary utilities
- **`seal_calibration.models`** - Data models

### Main Classes

```python
# Calibrators
from seal_calibration import (
    CameraCalibrator,      # Camera calibration
    StereoCalibrator,      # Stereo calibration
    ProjectorCalibrator,   # Projector calibration
)

# Pattern detectors
from seal_calibration import (
    ChessboardDetector,
    CirclesDetector,
    CharucoDetector,
    StripesDetector,
)

# I/O
from seal_calibration import (
    SEALCalibrationLoader,
    SEALCalibrationWriter,
)

# Models
from seal_calibration import (
    CameraParams,
    StereoParams,
    SEALCalibration,
)
```

---

## üß™ Testing

```bash
# Run tests
pytest tests/

# With coverage
pytest --cov=seal_calibration tests/
```

---

## üìñ Documentation

For legacy project documentation and CLI scripts, see:

- [`LEGACY_README.md`](LEGACY_README.md) - Original project documentation
- [`GRAY_CODE_GUIDE.md`](GRAY_CODE_GUIDE.md) - Gray Code calibration guide
- [`PROJECTOR_CALIBRATION.md`](PROJECTOR_CALIBRATION.md) - Projector calibration

---

## ü§ù Contributing

Contributions are welcome. Please:

1. Fork the project
2. Create a feature branch (`git checkout -b feature/AmazingFeature`)
3. Commit your changes (`git commit -m 'Add AmazingFeature'`)
4. Push to the branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

---

## üìÑ License

This project is licensed under CC BY-NC 4.0. See [`LICENSE.md`](LICENSE.md) for details.

---

## ‚ö†Ô∏è Disclaimer

This software is provided **"as is"**, without warranty of any kind.

- Misuse may **void the device warranty**
- The author is **not responsible** for damages, losses, or failures resulting from use

**Use at your own risk.**

---

## üôè Acknowledgments

- Project independently developed for **3DMakerPro SEAL Lite** scanners
- **Not affiliated** with 3DMakerPro or its distributors
- Based on **OpenCV** and standard computer vision algorithms

---

**Made with ‚ù§Ô∏è for the 3D scanning community**
